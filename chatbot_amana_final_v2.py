import streamlit as st
from sentence_transformers import SentenceTransformer, util

# ุชุญููู ููุฏูู MiniLM
model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

# ------------------ ุจูุงูุงุช ุงูุฎุฏูุงุช ------------------ #
services = {
    "ุฃุฌุงุฏ": '''ุฎุฏูุฉ ุชูุฏู ุฅูู ุชุทููุฑ ุจูุฆุฉ ุงูุงุณุชุซูุงุฑ ูู ุฃูุงูุฉ ุญุงุฆูุ ุญูุซ ุชุณูุญ ูููุณุชุฎุฏููู ุจุชุญุฏูุฏ ููุงูุน ุงุณุชุซูุงุฑูุฉ ุนูู ุงูุฎุฑูุทุฉุ ูุงูุชุญูู ูู ุตูุงุญูุชูุง ููุทุงุจูุชูุง ููุงุดุชุฑุงุทุงุชุ ูุชูุฏูู ุดูุงูู ุฃู ููุชุฑุญุงุช ูุชุญุณูู ุงูุฎุฏูุงุช.

ุงููุฆุฉ ุงููุณุชููุฏุฉ: ุงููุณุชุซูุฑููุ ุฑูุงุฏ ุงูุฃุนูุงูุ ุงูููุงุทููู.''',
    "ุงููุณุชูุดู ุงูุฌุบุฑุงูู": '''ุฎุฏูุฉ ุชูุงุนููุฉ ุชุนุฑุถ ุฎุฑูุทุฉ ุฑูููุฉ ุชุดูู ุจูุงูุงุช ุงูุฃุฑุงุถู ูุงููุฑุงูู ูุงูุฎุฏูุงุช ุงูุจูุฏูุฉ ูู ุญุงุฆู. ุชุณุงุนุฏ ุงููุณุชุฎุฏู ูู ุงูุชุนุฑู ุนูู ุงูุฃุญูุงุกุ ููุณููุงุช ุงูุดูุงุฑุนุ ูุญุฏูุฏ ุงูุฃุฑุงุถู.

ุงููุฆุฉ ุงููุณุชููุฏุฉ: ุงูููุงุทูููุ ุงูุดุฑูุงุชุ ุงูุฌูุงุช ุงูุญููููุฉ.''',
    "ุนููู": '''ุฎุฏูุฉ ุฅูุณุงููุฉ ูุฎุตุตุฉ ูุฏุนู ุงููุฆุงุช ุงูุฃูุซุฑ ุญุงุฌุฉ ูุซู ูุจุงุฑ ุงูุณูุ ูุฐูู ุงูุฅุนุงูุฉุ ูุงููุฑุถูุ ููุณุงุนุฏุชูู ูู ุงููุตูู ูุฎุฏูุงุช ุงูุฃูุงูุฉ ุฃู ุชูุฏูู ุทูุจ ูุณุงุนุฏุฉ ุฅููุชุฑููููุง.

ุงููุฆุฉ ุงููุณุชููุฏุฉ: ูุจุงุฑ ุงูุณูุ ุฐูู ุงูุฅุนุงูุฉุ ุงููุฑุถู.''',
    "ุบุฑุณ": '''ุฎุฏูุฉ ุชูุฏู ุฅูู ุชุนุฒูุฒ ุงูุชุดุฌูุฑ ููุดุฑ ุงูุซูุงูุฉ ุงูุจูุฆูุฉ ุจูู ุงูุฃุทูุงู ูู ููุทูุฉ ุญุงุฆู. ุชุชูุญ ููุนุงุฆูุงุช ุทูุจ ุบุฑุณ ุดุฌุฑุฉ ุจุงุณู ุฃุจูุงุฆูู ูุงููุณุงููุฉ ูู ุฒูุงุฏุฉ ุงููุณุงุญุงุช ุงูุฎุถุฑุงุก.

ุงููุฆุฉ ุงููุณุชููุฏุฉ: ุงูุนุงุฆูุงุชุ ุทูุงุจ ุงููุฏุงุฑุณุ ุงูููุชููู ุจุงูุจูุฆุฉ.'''
}

# ------------------ ุฃุณุฆูุฉ ุชุฏุฑูุจูุฉ ููุณุนุฉ ------------------ #
training_data = {
    "ุฃุฌุงุฏ": [
        "ูุง ูู ุฎุฏูุฉ ุฃุฌุงุฏุ", "ุฃุฑูุฏ ุงูุงุณุชุซูุงุฑ", "ุฃูุงูู ุงูุงุณุชุซูุงุฑ", "ุงุฌุงุฏ", "ุงุฎุชูุงุฑ ูููุน ุนูู ุงูุฎุฑูุทุฉ",
        "ููู ุฃุณุชุซูุฑ ูุน ุงูุฃูุงูุฉุ", "ูู ูููููู ูุนุฑูุฉ ุงูุฃุฑุงุถู ุงููุชุงุญุฉ ููุงุณุชุซูุงุฑุ", "ุฎุฏูุฉ ุงููุณุชุซูุฑูู",
        "ูุดุงุฑูุน ุงูุงุณุชุซูุงุฑ ูู ุญุงุฆู", "ุนุฑุถ ูุฑุต ุงุณุชุซูุงุฑูุฉ"
    ],
    "ุงููุณุชูุดู ุงูุฌุบุฑุงูู": [
        "ุฎุฏูุฉ ุฎุฑุงุฆุท", "ูููุน ุงูุญู", "ุดูุงุฑุน ุญุงุฆู", "ุงููุณุชูุดู ุงูุฌุบุฑุงูู", "ุฎุฏูุฉ ุฎุฑูุทุฉ",
        "ุฃูู ููุน ุงูุญูุ", "ุงูุญุฏูุฏ ุงูุฅุฏุงุฑูุฉ ููููุทูุฉ", "ููู ุฃุนุฑู ูููุน ุฃุฑุถูุ", "ุงุณุชูุดุงู ุงูููุงุทู ูู ุญุงุฆู",
        "ุงูุชุนุฑู ุนูู ุงูุดูุงุฑุน"
    ],
    "ุนููู": [
        "ูุณุงุนุฏุฉ ูุจุงุฑ ุงูุณู", "ุนููู", "ุฐูู ุงูุงุญุชูุงุฌุงุช", "ุทูุจ ูุณุงุนุฏุฉ", "ูุณุงุนุฏุฉ ุนุงุฌูุฉ",
        "ููู ุฃุทูุจ ุฏุนูุ", "ูู ููุฌุฏ ูุณุงุนุฏุฉ ูููุฑุถูุ", "ุฎุฏูุฉ ุงููุญุชุงุฌูู", "ุทูุจ ุฏุนู ุฅูุณุงูู", "ุฏุนู ูุฐูู ุงูุฅุนุงูุฉ"
    ],
    "ุบุฑุณ": [
        "ุบุฑุณ ุดุฌุฑุฉ", "ุชุดุฌูุฑ", "ุทูุจ ุดุชูุฉ", "ุฎุฏูุฉ ุบุฑุณ", "ุบุฑุณ ููุฃุทูุงู", "ุฃุฑูุฏ ุบุฑุณ ุดุฌุฑุฉ", "ุชุดุฌูุฑ ุงููุฏุงุฑุณ",
        "ุงููุดุงุฑูุฉ ูู ุบุฑุณ ุงูุฃุดุฌุงุฑ", "ููู ุฃุทูุจ ุดุฌุฑุฉุ", "ุบุฑุณ ุดุฌุฑุฉ ุจุงุณู ุทููู"
    ]
}

# ุชุฌููุฒ Embeddings
questions = []
labels = []
for svc, q_list in training_data.items():
    for q in q_list:
        questions.append(q)
        labels.append(svc)
from sentence_transformers import SentenceTransformer
question_embeddings = model.encode(questions, convert_to_tensor=True)

# ุฅุนุฏุงุฏ Streamlit
st.set_page_config(page_title="ุดุงุช ุจูุช ุฎุฏูุงุช ุฃูุงูุฉ ุญุงุฆู", layout="centered")
st.image("Hail_Municipality_Logo.png", width=200)
st.markdown("<h1 style='text-align: center; color: green;'>ุดุงุช ุจูุช ุฎุฏูุงุช ุฃูุงูุฉ ููุทูุฉ ุญุงุฆู</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>ุงุณุฃู ุนู ุฃู ุฎุฏูุฉ: ุฃุฌุงุฏุ ุนูููุ ุบุฑุณุ ุงููุณุชูุดู ุงูุฌุบุฑุงูู ๐ฑ</p>", unsafe_allow_html=True)

st.info(
    "๐ฑ ุฎุทูุงุช ุงููุตูู ููุฎุฏูุงุช ุนุจุฑ ุชุทุจูู ุชููููุง:\n"
    "1. ุงูุชุญ ุชุทุจูู ุชููููุง.\n"
    "2. ุงุฎุชุฑ 'ุงูุฌูุงุช' ูู ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ.\n"
    "3. ุงุฎุชุฑ 'ุฃูุงูุฉ ููุทูุฉ ุญุงุฆู'.\n"
    "4. ุงุฎุชุฑ ุงูุฎุฏูุฉ ุงูุชู ุชุฑุบุจ ุจูุง."
)

# ูุฏุฎู ุงููุณุชุฎุฏู
user_input = st.text_input("โ๏ธ ุงูุชุจ ุณุคุงูู ููุง")

if user_input:
    user_embedding = model.encode(user_input, convert_to_tensor=True)
    cosine_scores = util.cos_sim(user_embedding, question_embeddings)
    score = cosine_scores.max().item()
    top_match = cosine_scores.argmax().item()
    matched_service = labels[top_match]

    if score >= 0.5:
        st.markdown(f"<h3>โ ุงูุฎุฏูุฉ: {matched_service}</h3>", unsafe_allow_html=True)
        st.write(services[matched_service])
    else:
        st.warning("ุนุฐุฑูุงุ ูู ุฃุชููู ูู ุชุญุฏูุฏ ุงูุฎุฏูุฉ ุงููุทููุจุฉ ุจุฏูุฉ. ุญุงูู ุฅุนุงุฏุฉ ุตูุงุบุฉ ุงูุณุคุงู ุฃู ุฐูุฑ ุงุณู ุงูุฎุฏูุฉ.")
